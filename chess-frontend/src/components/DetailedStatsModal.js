import React from 'react';import { isWin, isLoss, isDraw, getResultDisplayText } from '../utils/resultStandardization';import { getPlayerAvatar } from '../utils/playerDisplayUtils';import './DetailedStatsModal.css';const DetailedStatsModal = ({ isOpen, onClose, gameHistories, user }) => {  if (!isOpen) return null;  // Calculate statistics  const totalGames = gameHistories.length;  const wins = gameHistories.filter((g) => isWin(g.result)).length;  const losses = gameHistories.filter((g) => isLoss(g.result)).length;  const draws = gameHistories.filter((g) => isDraw(g.result)).length;  // Sort games by date (newest first)  const sortedGames = [...gameHistories].sort((a, b) => {    const dateA = new Date(a.played_at || a.timestamp);    const dateB = new Date(b.played_at || b.timestamp);    return dateB - dateA;  });  return (    <div className="detailed-stats-overlay" onClick={onClose}>      <div className="detailed-stats-modal" onClick={(e) => e.stopPropagation()}>        {/* Header */}        <div className="detailed-stats-header">          <h2>ðŸ“Š Detailed Game Statistics</h2>          <button className="close-btn" onClick={onClose}>âœ•</button>        </div>        {/* Summary Cards */}        <div className="stats-summary">          <div className="summary-card">            <div className="summary-value">{totalGames}</div>            <div className="summary-label">Total Games</div>          </div>          <div className="summary-card success">            <div className="summary-value">{wins}</div>            <div className="summary-label">Wins</div>          </div>          <div className="summary-card error">            <div className="summary-value">{losses}</div>            <div className="summary-label">Losses</div>          </div>          <div className="summary-card neutral">            <div className="summary-value">{draws}</div>            <div className="summary-label">Draws</div>          </div>          <div className="summary-card info">            <div className="summary-value">{user?.rating || 1200}</div>            <div className="summary-label">Current Rating</div>          </div>        </div>        {/* Performance Charts */}        <div className="stats-charts">          {/* Win/Loss/Draw Bar Chart */}          <div className="chart-card">            <h3 className="chart-title">Performance Distribution</h3>            <div className="bar-chart">              <div className="bar-item">                <div className="bar-label">Wins</div>                <div className="bar-container">                  <div                    className="bar-fill win"                    style={{ width: `${totalGames > 0 ? (wins / totalGames) * 100 : 0}%` }}                  >                    {wins}                  </div>                </div>                <div className="bar-percentage">{totalGames > 0 ? Math.round((wins / totalGames) * 100) : 0}%</div>              </div>              <div className="bar-item">                <div className="bar-label">Losses</div>                <div className="bar-container">                  <div                    className="bar-fill loss"                    style={{ width: `${totalGames > 0 ? (losses / totalGames) * 100 : 0}%` }}                  >                    {losses}                  </div>                </div>                <div className="bar-percentage">{totalGames > 0 ? Math.round((losses / totalGames) * 100) : 0}%</div>              </div>              <div className="bar-item">                <div className="bar-label">Draws</div>                <div className="bar-container">                  <div                    className="bar-fill draw"                    style={{ width: `${totalGames > 0 ? (draws / totalGames) * 100 : 0}%` }}                  >                    {draws}                  </div>                </div>                <div className="bar-percentage">{totalGames > 0 ? Math.round((draws / totalGames) * 100) : 0}%</div>              </div>            </div>          </div>          {/* Recent Performance Timeline */}          <div className="chart-card">            <h3 className="chart-title">Recent Performance (Last 10 Games)</h3>            <div className="timeline-chart">              {sortedGames.slice(0, 10).reverse().map((game, index) => {                const gameIsWin = isWin(game.result);                const gameIsLoss = isLoss(game.result);                const resultClass = gameIsWin ? 'win' : gameIsLoss ? 'loss' : 'draw';                const resultIcon = gameIsWin ? 'âœ“' : gameIsLoss ? 'âœ—' : '=';                return (                  <div key={game.id || index} className={`timeline-item ${resultClass}`} title={getResultDisplayText(game.result)}>                    <span className="timeline-icon">{resultIcon}</span>                  </div>                );              })}            </div>            <div className="timeline-legend">              <span className="legend-item"><span className="legend-icon win">âœ“</span> Win</span>              <span className="legend-item"><span className="legend-icon loss">âœ—</span> Loss</span>              <span className="legend-item"><span className="legend-icon draw">=</span> Draw</span>            </div>          </div>        </div>        {/* Games Table */}        <div className="stats-table-container">          <table className="stats-table">            <thead>              <tr>                <th>Date</th>                <th>Mode</th>                <th>Opponent</th>                <th>Color</th>                <th>Result</th>                <th>Player Score</th>                <th>Opponent Score</th>                <th>Moves</th>              </tr>            </thead>            <tbody>              {sortedGames.map((game, index) => {                const date = new Date(game.played_at || game.timestamp);                const dateStr = date.toLocaleDateString('en-US', {                  month: 'short',                  day: 'numeric',                  year: 'numeric'                });                const timeStr = date.toLocaleTimeString('en-US', {                  hour: '2-digit',                  minute: '2-digit'                });                const result = getResultDisplayText(game.result);                const gameIsWin = isWin(game.result);                const gameIsLoss = isLoss(game.result);                const gameIsDraw = isDraw(game.result);                const playerScore = game.final_score ?? game.finalScore ?? game.score ?? 0;                const opponentScore = game.opponent_score ?? 0;                // Opponent info                let opponentName = 'Unknown';                let opponentAvatar = null;                if (game.game_mode === 'computer') {                  opponentName = `Computer (Lv ${game.computer_level || game.computer_depth || 1})`;                  opponentAvatar = null; // Computer doesn't have avatar                } else if (game.opponent_name) {                  opponentName = game.opponent_name;                  opponentAvatar = game.opponent_avatar;                }                const color = game.player_color === 'w' ? 'âšª White' : 'âš« Black';                // Parse moves - handle semicolon-separated format: "e4,2.52;Nf6,0.98;..."                let moveCount = 0;                console.log(`Game ${game.id}: moves type =`, typeof game.moves, 'value =', game.moves);                if (game.moves) {                  if (typeof game.moves === 'string') {                    // Split by semicolon and count non-empty entries                    const movesArray = game.moves.split(';').filter(m => m.trim());                    moveCount = movesArray.length;                    console.log(`Game ${game.id}: Parsed ${moveCount} moves from string`);                  } else if (Array.isArray(game.moves)) {                    moveCount = game.moves.length;                    console.log(`Game ${game.id}: Got ${moveCount} moves from array`);                  }                } else {                  console.log(`Game ${game.id}: No moves field found`);                }                return (                  <tr key={game.id || index} className={gameIsWin ? 'row-win' : gameIsLoss ? 'row-loss' : gameIsDraw ? 'row-draw' : ''}>                    <td>                      <div className="date-cell">                        <div className="date-main">{dateStr}</div>                        <div className="date-time">{timeStr}</div>                      </div>                    </td>                    <td>                      <span className={`mode-badge ${game.game_mode}`}>                        {game.game_mode === 'computer' ? 'ðŸ¤– Computer' : 'ðŸ‘¥ Multiplayer'}                      </span>                    </td>                    <td>                      <div className="opponent-cell">                        {opponentAvatar && (                          <img                            src={getPlayerAvatar(opponentAvatar)}                            alt={opponentName}                            className="opponent-avatar"                          />                        )}                        {!opponentAvatar && game.game_mode === 'computer' && (                          <span className="computer-icon">ðŸ¤–</span>                        )}                        <span className="opponent-name">                          {opponentName}                          {game.game_mode === 'computer'                            ? ` (Level ${game.computer_level || 1})`                            : ` (${game.opponent_rating || 1200})`                          }                        </span>                      </div>                    </td>                    <td>{color}</td>                    <td>                      <span className={`result-badge ${gameIsWin ? 'win' : gameIsLoss ? 'loss' : gameIsDraw ? 'draw' : 'unknown'}`}>                        {result}                      </span>                    </td>                    <td className="score-cell">{typeof playerScore === 'number' ? playerScore.toFixed(1) : '0.0'}</td>                    <td className="score-cell">                      {typeof opponentScore === 'number' ? opponentScore.toFixed(1) : '0.0'}                    </td>                    <td className="moves-cell">{moveCount}</td>                  </tr>                );              })}            </tbody>          </table>        </div>      </div>    </div>  );};export default DetailedStatsModal;