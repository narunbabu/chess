// PresenceIndicator.js - Shows connection status and online usersimport React, { useState, useEffect } from 'react';import presenceService from '../services/presenceService';import './PresenceIndicator.css';const PresenceIndicator = ({ user }) => {  const [isConnected, setIsConnected] = useState(false);  const [onlineUsers, setOnlineUsers] = useState([]);  const [presenceStats, setPresenceStats] = useState({});  const [showOnlineUsers, setShowOnlineUsers] = useState(false);  useEffect(() => {    if (user) {      initializePresence();    }    return () => {      presenceService.disconnect();    };  }, [user]);  const initializePresence = async () => {    const authToken = localStorage.getItem('authToken');    if (!authToken) return;    // Set up event handlers    presenceService.setEventHandlers({      onConnectionChange: (connected) => {        setIsConnected(connected);        if (connected) {          // Load data only on initial connection          loadOnlineUsers();          loadPresenceStats();        }      },      onUserOnline: (users) => {        setOnlineUsers(prev => {          const userIds = prev.map(u => u.user_id || u.id);          const newUsers = users.filter(u => !userIds.includes(u.user_id || u.id));          return [...prev, ...newUsers];        });        // Update stats when user joins (optional - can be removed if stats are calculated locally)        // loadPresenceStats(); // Commented out to reduce API calls      },      onUserOffline: (user) => {        setOnlineUsers(prev =>          prev.filter(u => (u.user_id || u.id) !== (user.user_id || user.id))        );        // Update stats when user leaves (optional - can be removed if stats are calculated locally)        // loadPresenceStats(); // Commented out to reduce API calls      },      onPresenceUpdate: (event) => {        console.log('Presence update received:', event);        // Only reload stats if it's a significant change (e.g., game status changes)        // For simple presence updates, rely on the onUserOnline/onUserOffline events        if (event.game_status_changed) {          loadPresenceStats();        }      }    });    // Initialize the service    const success = await presenceService.initialize(user, authToken);    if (success) {      setIsConnected(true);      // Data will be loaded via onConnectionChange handler      // No need to duplicate calls here    }  };  const loadOnlineUsers = async () => {    try {      const users = await presenceService.getOnlineUsers();      setOnlineUsers(users);    } catch (error) {      console.error('Failed to load online users:', error);    }  };  const loadPresenceStats = async () => {    try {      const stats = await presenceService.getPresenceStats();      setPresenceStats(stats);    } catch (error) {      console.error('Failed to load presence stats:', error);    }  };  const getStatusColor = () => {    if (!isConnected) return '#dc3545'; // Red    return '#28a745'; // Green  };  const getStatusText = () => {    if (!isConnected) return 'Disconnected';    return 'Online';  };  return (    <div className="presence-indicator">      {/* Connection Status */}      <div className="connection-status">        <div          className="status-dot"          style={{ backgroundColor: getStatusColor() }}        ></div>        <span className="status-text">{getStatusText()}</span>      </div>      {/* Online Users Count */}      {isConnected && (        <div className="online-stats">          <button            className="online-count-btn"            onClick={() => setShowOnlineUsers(!showOnlineUsers)}            title="Click to see online users"          >            ðŸ‘¥ {presenceStats.total_online || 0} online            {presenceStats.in_game > 0 && (              <span className="in-game-count"> ({presenceStats.in_game} playing)</span>            )}          </button>          {/* Online Users Dropdown */}          {showOnlineUsers && (            <div className="online-users-dropdown">              <div className="dropdown-header">                <h4>Online Users ({onlineUsers.length})</h4>                <button                  className="close-btn"                  onClick={() => setShowOnlineUsers(false)}                >                  Ã—                </button>              </div>              <div className="users-list">                {onlineUsers.length === 0 ? (                  <div className="no-users">No other users online</div>                ) : (                  onlineUsers.map((onlineUser, index) => (                    <div key={index} className="user-item">                      <div className="user-info">                        <div className="user-name">                          {onlineUser.user?.name || onlineUser.name || 'Anonymous'}                        </div>                        <div className="user-status">                          {onlineUser.game_status === 'playing' ? (                            <span className="status-playing">ðŸŽ® Playing</span>                          ) : onlineUser.game_status === 'waiting' ? (                            <span className="status-waiting">â³ Waiting</span>                          ) : (                            <span className="status-available">âœ… Available</span>                          )}                        </div>                      </div>                    </div>                  ))                )}              </div>              {/* Refresh Button */}              <div className="dropdown-footer">                <button                  className="refresh-btn"                  onClick={loadOnlineUsers}                >                  ðŸ”„ Refresh                </button>              </div>            </div>          )}        </div>      )}      {/* Reconnecting Indicator */}      {!isConnected && (        <div className="reconnecting-indicator">          <span className="reconnecting-text">Reconnecting...</span>          <div className="spinner"></div>        </div>      )}    </div>  );};export default PresenceIndicator;