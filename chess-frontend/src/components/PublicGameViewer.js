// Public game viewer - allows anyone to view a shared game without loginimport React, { useState, useEffect } from 'react';import { useParams, useNavigate } from 'react-router-dom';import { Chess } from 'chess.js';import api from '../services/api';import ChessBoard from './play/ChessBoard';import SocialShare from './SocialShare';import { getGameResultShareMessage, getShareableGameUrl } from '../utils/socialShareUtils';import { isWin, isDraw, getResultDisplayText } from '../utils/resultStandardization';import './PublicGameViewer.css';const PublicGameViewer = () => {  const { gameId } = useParams();  const navigate = useNavigate();  const [game, setGame] = useState(null);  const [currentMoveIndex, setCurrentMoveIndex] = useState(0);  const [chessGame, setChessGame] = useState(new Chess());  const [loading, setLoading] = useState(true);  const [error, setError] = useState(null);  const [autoPlay, setAutoPlay] = useState(false);  useEffect(() => {    const fetchGame = async () => {      try {        setLoading(true);        setError(null);        // Fetch game from API (no auth required endpoint)        const response = await api.get(`/games/public/${gameId}`);        const gameData = response.data;        setGame(gameData);        // Initialize chess game        const chess = new Chess();        setChessGame(chess);        setCurrentMoveIndex(0);        setLoading(false);      } catch (err) {        console.error('Error fetching game:', err);        setError(err.response?.data?.message || 'Failed to load game. The game may not exist or is not publicly shared.');        setLoading(false);      }    };    if (gameId) {      fetchGame();    }  }, [gameId]);  // Auto-play functionality  useEffect(() => {    if (!autoPlay || !game) return;    const interval = setInterval(() => {      if (currentMoveIndex < game.moves.length) {        handleNextMove();      } else {        setAutoPlay(false);      }    }, 1000);    return () => clearInterval(interval);  }, [autoPlay, currentMoveIndex, game]);  const handleNextMove = () => {    if (!game || currentMoveIndex >= game.moves.length) return;    const moveData = game.moves[currentMoveIndex];    if (moveData && (moveData.move?.san || moveData.san)) {      const newGame = new Chess(chessGame.fen());      const san = moveData.move?.san || moveData.san;      try {        newGame.move(san, { sloppy: true });        setChessGame(newGame);        setCurrentMoveIndex(currentMoveIndex + 1);      } catch (err) {        console.error('Error making move:', err);      }    }  };  const handlePreviousMove = () => {    if (currentMoveIndex === 0) return;    // Rebuild game from start to current position - 1    const newGame = new Chess();    for (let i = 0; i < currentMoveIndex - 1; i++) {      const moveData = game.moves[i];      if (moveData && (moveData.move?.san || moveData.san)) {        try {          newGame.move(moveData.move?.san || moveData.san, { sloppy: true });        } catch (err) {          console.error('Error rebuilding move:', err);        }      }    }    setChessGame(newGame);    setCurrentMoveIndex(currentMoveIndex - 1);  };  const handleReset = () => {    setChessGame(new Chess());    setCurrentMoveIndex(0);    setAutoPlay(false);  };  const handleGoToEnd = () => {    const newGame = new Chess();    game.moves.forEach((moveData) => {      if (moveData && (moveData.move?.san || moveData.san)) {        try {          newGame.move(moveData.move?.san || moveData.san, { sloppy: true });        } catch (err) {          console.error('Error making move:', err);        }      }    });    setChessGame(newGame);    setCurrentMoveIndex(game.moves.length);  };  if (loading) {    return (      <div className="public-game-viewer loading">        <div className="loading-spinner">          <div className="spinner"></div>          <p>Loading game...</p>        </div>      </div>    );  }  if (error) {    return (      <div className="public-game-viewer error">        <div className="error-message">          <h2>âŒ Game Not Found</h2>          <p>{error}</p>          <button onClick={() => navigate('/')} className="btn btn-primary">            Go to Home          </button>        </div>      </div>    );  }  if (!game) {    return null;  }  // Calculate game result info  const isWinResult = isWin(game.result);  const isDrawResult = isDraw(game.result);  const resultText = getResultDisplayText(game.result);  return (    <div className="public-game-viewer">      <div className="viewer-header">        <h1>â™Ÿï¸ Chess Game Replay</h1>        <p className="game-info">          {game.player_color === 'w' ? 'White' : 'Black'} vs {game.is_multiplayer ? 'Opponent' : 'Computer'}          {' â€¢ '}          <span className={`result ${isWinResult ? 'win' : isDrawResult ? 'draw' : 'loss'}`}>            {resultText}          </span>        </p>      </div>      <div className="viewer-content">        {/* Chess Board */}        <div className="board-section">          <ChessBoard            game={chessGame}            boardOrientation={game.player_color === 'w' ? 'white' : 'black'}            boardWidth={Math.min(600, window.innerWidth - 40)}            isReplayMode={true}            onDrop={() => false}            moveFrom=""            setMoveFrom={() => {}}            rightClickedSquares={{}}            setRightClickedSquares={() => {}}            moveSquares={{}}            setMoveSquares={() => {}}            playerColor={game.player_color}            activeTimer={null}            setMoveCompleted={() => {}}            setTimerButtonColor={() => {}}            previousGameStateRef={{ current: null }}            evaluateMove={() => {}}            updateGameStatus={() => {}}          />          {/* Controls */}          <div className="controls">            <div className="progress-info">              Move {currentMoveIndex} of {game.moves.length}            </div>            <div className="control-buttons">              <button                onClick={handleReset}                disabled={currentMoveIndex === 0}                className="btn btn-secondary btn-sm"                title="Reset to start"              >                â®ï¸              </button>              <button                onClick={handlePreviousMove}                disabled={currentMoveIndex === 0}                className="btn btn-secondary btn-sm"                title="Previous move"              >                âª              </button>              <button                onClick={() => setAutoPlay(!autoPlay)}                className={`btn btn-primary btn-sm ${autoPlay ? 'active' : ''}`}                title={autoPlay ? 'Pause' : 'Auto-play'}              >                {autoPlay ? 'â¸ï¸' : 'â–¶ï¸'}              </button>              <button                onClick={handleNextMove}                disabled={currentMoveIndex >= game.moves.length}                className="btn btn-secondary btn-sm"                title="Next move"              >                â©              </button>              <button                onClick={handleGoToEnd}                disabled={currentMoveIndex === game.moves.length}                className="btn btn-secondary btn-sm"                title="Go to end"              >                â­ï¸              </button>            </div>            {/* Current move display */}            {currentMoveIndex > 0 && game.moves[currentMoveIndex - 1] && (              <div className="current-move">                <span className="move-number">                  {Math.ceil(currentMoveIndex / 2)}.                </span>                {' '}                <span className="move-san">                  {game.moves[currentMoveIndex - 1].move?.san || game.moves[currentMoveIndex - 1].san}                </span>              </div>            )}          </div>        </div>        {/* Sidebar */}        <div className="sidebar">          {/* Game Details */}          <div className="details-card">            <h3>Game Details</h3>            <div className="detail-item">              <span className="label">Date:</span>              <span className="value">                {game.played_at ? new Date(game.played_at).toLocaleDateString() : 'N/A'}              </span>            </div>            <div className="detail-item">              <span className="label">Total Moves:</span>              <span className="value">{game.moves.length}</span>            </div>            {game.finalScore !== undefined && (              <div className="detail-item">                <span className="label">Final Score:</span>                <span className="value">{game.finalScore.toFixed(1)}</span>              </div>            )}            <div className="detail-item">              <span className="label">Result:</span>              <span className={`value result ${isWinResult ? 'win' : isDrawResult ? 'draw' : 'loss'}`}>                {resultText}              </span>            </div>          </div>          {/* Share Section */}          <div className="share-card">            <h3>Share This Game</h3>            <p className="share-description">              Challenge your friends to beat this result!            </p>            <SocialShare              text={getGameResultShareMessage({                result: game.result,                playerColor: game.player_color,                isWin: isWinResult,                isDraw: isDrawResult,                opponentName: game.is_multiplayer ? 'Opponent' : 'Computer'              })}              url={getShareableGameUrl(gameId)}              title="Check out this chess game!"              hashtags={['chess', 'chessweb']}              showLabel={false}              platforms={['whatsapp', 'facebook', 'twitter', 'telegram', 'copy']}              onShare={(platform) => console.log(`Shared via ${platform}`)}            />          </div>          {/* Call to Action */}          <div className="cta-card">            <h3>Play Chess Online</h3>            <p>Join Chess Web and play against players worldwide!</p>            <div className="cta-buttons">              <button                onClick={() => navigate('/play')}                className="btn btn-primary"              >                Play Now              </button>              <button                onClick={() => navigate('/login')}                className="btn btn-secondary"              >                Sign Up              </button>            </div>          </div>        </div>      </div>    </div>  );};export default PublicGameViewer;