/* * File: src/components/play/GameInfo.js * Modifications: * - Added `settings` to props. * - Conditionally rendered the "Move completed!" hint based on `settings.requireDoneButton`. */import React from "react";const GameInfo = ({  gameStatus,  playerColor,  game,  moveCompleted,  activeTimer,  isReplayMode,  currentReplayMove,  totalMoves,  settings,  isOnlineGame,  players,}) => {  const getStatusIcon = () => {    if (isReplayMode) return "â¯ï¸";    if (game?.isCheckmate()) return "â™”";    if (game?.isCheck()) return "âš ï¸";    if (game?.isStalemate()) return "ðŸ¤";    if (moveCompleted && activeTimer === playerColor && settings?.requireDoneButton) return "âœ…";    return "â„¹ï¸";  };  // Filter out redundant turn status since it's shown in timer section  const shouldShowStatus = () => {    if (!gameStatus) return false;    // Don't show basic turn status like "White's turn" or "Black's turn"    if (gameStatus.match(/^(White|Black)'s turn$/i)) return false;    // Show important game states    return true;  };  return (    <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>      {/* Important Game Status Only - not basic turn info */}      {shouldShowStatus() && (        <div style={{          display: 'flex',          alignItems: 'center',          gap: '0.5rem',          padding: '0.5rem',          backgroundColor: 'rgba(255, 255, 255, 0.1)',          borderRadius: '0.375rem',          fontSize: '0.875rem'        }}>          <span style={{ fontSize: '1rem' }}>{getStatusIcon()}</span>          <span style={{ color: '#fff', fontWeight: '500' }}>{gameStatus}</span>        </div>      )}      {/* Move Completion Hint */}      {moveCompleted &&        activeTimer === playerColor &&        !isReplayMode &&        settings?.requireDoneButton && (          <div style={{            display: 'flex',            alignItems: 'center',            gap: '0.5rem',            padding: '0.5rem',            backgroundColor: 'rgba(34, 197, 94, 0.2)',            border: '1px solid rgba(34, 197, 94, 0.5)',            borderRadius: '0.375rem',            fontSize: '0.75rem'          }}>            <span style={{ fontSize: '1rem' }}>âœ…</span>            <span style={{ color: '#22c55e' }}>Tap timer to confirm</span>          </div>        )}      {/* Replay Info */}      {isReplayMode && (        <div style={{          display: 'flex',          alignItems: 'center',          justifyContent: 'space-between',          padding: '0.5rem',          backgroundColor: 'rgba(59, 130, 246, 0.2)',          border: '1px solid rgba(59, 130, 246, 0.5)',          borderRadius: '0.375rem',          fontSize: '0.75rem'        }}>          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>            <span style={{ fontSize: '1rem' }}>â¯ï¸</span>            <span style={{ color: '#3b82f6' }}>Replay</span>          </div>          <span style={{ color: '#fff', fontSize: '0.875rem' }}>            {currentReplayMove} / {totalMoves}          </span>        </div>      )}    </div>  );};export default GameInfo;