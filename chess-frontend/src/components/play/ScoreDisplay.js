import React from "react";import { truncatePlayerName, getPlayerAvatar } from '../../utils/playerDisplayUtils';const ScoreDisplay = ({  playerScore,  lastMoveEvaluation,  computerScore,  lastComputerEvaluation,  isOnlineGame,  mode = 'computer',  playerData = null,  opponentData = null}) => {  const formatScore = (score) => {    return typeof score === "number" ? Math.abs(score).toFixed(1) : "0.0";  };  const getMoveClassIcon = (classification) => {    switch (classification?.toLowerCase()) {      case "excellent": return "â­";      case "great": return "ðŸ”¥";      case "good": return "âœ“";      case "inaccuracy": return "âš ï¸";      case "mistake": return "âŒ";      case "blunder": return "ðŸ’¥";      default: return ""; // Don't show anything if no classification    }  };  // Helper function to render avatar or icon  const renderAvatar = (data, isComputer = false) => {    if (isComputer) {      // Show computer icon for computer side only      return <span style={{ fontSize: '14px' }}>ðŸ¤–</span>;    }    // For player, show avatar if available    const avatarUrl = getPlayerAvatar(data);    if (avatarUrl) {      return (        <img          src={avatarUrl}          alt={data?.name || data?.user?.name || 'Player'}          style={{            width: '20px',            height: '20px',            borderRadius: '50%',            objectFit: 'cover'          }}        />      );    }    // No avatar available - show placeholder emoji    return <span style={{ fontSize: '14px' }}>ðŸ‘¤</span>;  };  // Helper function to get display name  const getDisplayName = (data, isComputer = false, fallback = 'Player') => {    if (isComputer) {      return 'CPU';    }    // Handle both naming conventions: data.name or data.user.name    const name = data?.name || data?.user?.name;    return truncatePlayerName(name || fallback);  };  return (    <div style={{      display: 'flex',      justifyContent: 'space-between',      alignItems: 'center',      gap: '8px',      fontSize: '14px'    }}>      {/* Computer/Opponent Score */}      <div style={{        display: 'flex',        alignItems: 'center',        gap: '6px',        padding: '6px 10px',        borderRadius: '6px',        backgroundColor: 'rgba(239, 68, 68, 0.1)',        border: '1px solid rgba(239, 68, 68, 0.3)',        flex: '1'      }}>        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>          {renderAvatar(opponentData, mode === 'computer')}          <span style={{ fontSize: '14px', color: '#ef4444', fontWeight: '500' }}>            {getDisplayName(opponentData, mode === 'computer', 'Rival')}          </span>          {lastComputerEvaluation && (            <span style={{ fontSize: '12px', color: '#ef4444' }}>              {getMoveClassIcon(lastComputerEvaluation.moveClassification)}            </span>          )}        </div>        <span style={{          fontFamily: 'monospace',          fontSize: '16px',          fontWeight: 'bold',          color: '#ef4444',          marginLeft: 'auto'        }}>          {formatScore(computerScore)}        </span>      </div>      {/* VS separator */}      <div style={{        fontSize: '12px',        color: '#666',        fontWeight: 'bold',        padding: '0 4px'      }}>        VS      </div>      {/* Player Score */}      <div style={{        display: 'flex',        alignItems: 'center',        gap: '6px',        padding: '6px 10px',        borderRadius: '6px',        backgroundColor: 'rgba(34, 197, 94, 0.1)',        border: '1px solid rgba(34, 197, 94, 0.3)',        flex: '1'      }}>        <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>          {renderAvatar(playerData, false)}          <span style={{ fontSize: '14px', color: '#22c55e', fontWeight: '500' }}>            {getDisplayName(playerData, false, 'You')}          </span>          {lastMoveEvaluation && (            <span style={{ fontSize: '12px', color: '#22c55e' }}>              {getMoveClassIcon(lastMoveEvaluation.moveClassification)}            </span>          )}        </div>        <span style={{          fontFamily: 'monospace',          fontSize: '16px',          fontWeight: 'bold',          color: '#22c55e',          marginLeft: 'auto'        }}>          {formatScore(playerScore)}        </span>      </div>    </div>  );};export default ScoreDisplay;